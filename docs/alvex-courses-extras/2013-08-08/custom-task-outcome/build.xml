<project basedir="." default="dist-jars" name="Alvex master build script">
	<tstamp>
		<format property="TODAY" pattern="ddMMyyyy" locale="en,US"/>
	</tstamp>

	<!-- Load external properties -->
	<property file="${user.home}/build.properties" />
	<property file="${user.home}/.build.properties" />
	<property file="build.properties" />

	<!-- Predefined properties -->
	<property name="config.dir" value="config" />
	<property name="config.repo.dir" value="${config.dir}/repo" />
	<property name="config.share.dir" value="${config.dir}/share" />
	<property name="config.repo.includes" value="**/*.*" />
	<property name="config.repo.excludes" value="**/*.properties" />
	<property name="config.share.includes" value="**/*.*" />
	<property name="config.share.excludes" value="**/*.properties" />

	<property name="source.dir" value="source" />
	<property name="res.dir" value="${source.dir}/web" />
	<property name="res.includes" value="**/*.*" />
	<property name="res.excludes" value="" />
	<property name="java.dir" value="${source.dir}/java" />
	<property name="java.repo.dir" value="${java.dir}/repo" />
	<property name="java.share.dir" value="${java.dir}/share" />
	<property name="java.repo.classpath.dir" value="" />
	<property name="java.repo.classpath.includes" value="**/*.jar" />
	<property name="java.repo.classpath.excludes" value="" />
	<property name="java.repo.srcdir" value="" />
	<property name="java.repo.debug" value="off" />
	<property name="java.share.classpath.dir" value="" />
	<property name="java.share.classpath.includes" value="**/*.jar" />
	<property name="java.share.classpath.excludes" value="" />
	<property name="java.share.srcdir" value="" />
	<property name="java.share.debug" value="off" />

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.jar.repo.dir" value="${build.dir}/repo-jar" />
	<property name="build.jar.share.dir" value="${build.dir}/share-jar" />

	<property name="dist.dir" value="${build.dir}/dist" />

	<!-- Additional task definitions -->
	<taskdef name="yuicompress" classname="com.simonbuckle.ant.tasks.CompressTask">
		<classpath>
			<pathelement location="../lib/yuicompressor-2.4.2.jar" />
			<pathelement location="../lib/yuicompressor-taskdef-1.0.jar" />                       
		</classpath>
	</taskdef>

	<taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
		<classpath>
			<pathelement location="../lib/ml-ant-http-1.1.jar" />
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="../lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- Targets -->

	<!-- Clean out the build and distribution directories -->
	<target name="clean" description="Clean out all build directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Prepare env to build the extension -->
	<target name="build-prepare-repo" description="Prepare env to build the extension">
		<!-- Check paths -->
		<available property="dir.repo.exists" file="${config.repo.dir}" type="dir"/>
		<available property="dir.java.repo.exists" file="${java.repo.dir}" type="dir"/>
		<!-- Set variables -->
		<condition property="build.repo">
			<or>
				<isset property="dir.repo.exists" />
				<isset property="dir.java.repo.exists" />
			</or>
		</condition>
		<if>
			<isset property="dir.java.repo.exists" />
			<then>
				<var name="java.repo.srcdir" value="${java.repo.dir}" />
			</then>
		</if>
		<if>
			<isset property="build.repo" />
			<then>
				<mkdir dir="${build.jar.repo.dir}" />
			</then>
		</if>
	</target>
	
	<target name="build-prepare-share" description="Prepare env to build the extension">
		<!-- Check paths -->
		<available property="dir.share.exists" file="${config.share.dir}" type="dir"/>
		<available property="dir.res.exists" file="${res.dir}" type="dir"/>
		<available property="dir.java.share.exists" file="${java.share.dir}" type="dir"/>
		<!-- Set variables -->
		<condition property="build.share">
			<or>
				<isset property="dir.share.exists" />
				<isset property="dir.res.exists" />
				<isset property="dir.java.share.exists" />
			</or>
		</condition>
		<if>
			<isset property="dir.java.share.exists" />
			<then>
				<var name="java.share.srcdir" value="${java.share.dir}" />
			</then>
		</if>
		<if>
			<isset property="build.share" />
			<then>
				<mkdir dir="${build.jar.share.dir}" />
			</then>
		</if>
	</target>

	<!-- Build repo extension -->
	<target name="build-repo-jar" description="Build repo extension" depends="build-prepare-repo" if="build.repo">
		<if>
			<isset property="dir.repo.exists" />
			<then>
				<!-- Copy configuration files -->
				<copy todir="${build.jar.repo.dir}" includeEmptyDirs="false">
					<fileset dir="${config.repo.dir}" includes="${config.repo.includes}">
						<exclude name="${config.repo.excludes}" />
					</fileset>
				</copy>
				<!-- Process .properties files -->
				<native2ascii encoding="UTF-8" src="${config.repo.dir}" dest="${build.jar.repo.dir}" includes="**/*.properties" ext=".properties"/>
				<!-- Update version and edition -->
				<replace dir="${build.jar.repo.dir}" token="%VERSION" value="${extension.version}">
					<include name="**/*.properties"/>
				</replace>
				<replace dir="${build.jar.repo.dir}" token="%EDITION" value="${extension.edition}">
					<include name="**/*.properties"/>
				</replace>
			</then>
		</if>
		<!-- Build Java code -->
		<if>
			<not>
				<equals arg1="${java.repo.srcdir}" arg2=""/>
			</not>
			<then>
				<javac debug="${java.repo.debug}" debuglevel="${java.repo.debuglevel}" srcdir="${java.repo.srcdir}" destdir="${build.jar.repo.dir}" includeAntRuntime="no">
					<classpath>
						<fileset dir="${java.repo.classpath.dir}">
							<include name="${java.repo.classpath.includes}" />
							<exclude name="${java.repo.classpath.excludes}" />
						</fileset>
					</classpath>
				</javac>
			</then>
		</if>
	</target>
	
	<!-- Build Share extension -->
	<target name="build-share-jar" description="Build Share extension" depends="build-prepare-share" if="build.share">
		<if>
			<isset property="dir.share.exists" />
			<then>
				<!-- Copy configuration files -->
				<copy todir="${build.jar.share.dir}" includeEmptyDirs="false">
					<fileset dir="${config.share.dir}" includes="${config.share.includes}">
						<exclude name="${config.share.excludes}" />
					</fileset>
				</copy>
				<!-- Process .properties files -->
				<native2ascii encoding="UTF-8" src="${config.share.dir}" dest="${build.jar.share.dir}" includes="**/*.properties" ext=".properties"/>
				<!-- Update version and edition -->
				<replace dir="${build.jar.share.dir}" token="%VERSION" value="${extension.version}">
					<include name="**/*.properties"/>
				</replace>
				<replace dir="${build.jar.share.dir}" token="%EDITION" value="${extension.edition}">
					<include name="**/*.properties"/>
				</replace>
			</then>
		</if>
		<if>
			<isset property="dir.res.exists" />
			<then>
				<!-- Copy resources -->
				<copy todir="${build.jar.share.dir}/META-INF" includeEmptyDirs="false">
					<fileset dir="${res.dir}" includes="${res.includes}">
						<exclude name="${res.excludes}" />
					</fileset>
				</copy>
			</then>
		</if>
		<!-- Minify JS -->
		<if>
			<isset property="dir.res.exists" />
			<then>
				<yuicompress todir="${build.jar.share.dir}/META-INF">
					<fileset dir="${res.dir}">
						<include name="**/*.js" />
					</fileset>
					<mapper type="glob" from="*.js" to="*-min.js" />
				</yuicompress>
			</then>
		</if>
		<!-- Build Java code -->
		<if>
			<not>
				<equals arg1="${java.share.srcdir}" arg2=""/>
			</not>
			<then>
				<javac debug="${java.share.debug}" debuglevel="${java.share.debuglevel}" srcdir="${java.share.srcdir}" destdir="${build.jar.share.dir}" includeAntRuntime="no">
					<classpath>
						<fileset dir="${java.share.classpath.dir}">
							<include name="${java.share.classpath.includes}" />
							<exclude name="${java.share.classpath.excludes}" />
						</fileset>
					</classpath>
				</javac>
			</then>
		</if>
	</target>

	<!-- Build all extensions -->
	<target name="build-all" description="Build all extensions" depends="build-repo-jar,build-share-jar" />

	<!-- Build repo extension jar -->
	<target name="dist-repo-jar" description="Build repo extension jar" depends="build-repo-jar" if="build.repo">
		<jar destfile="${dist.dir}/${jar.repo.name}">
			<fileset dir="${build.jar.repo.dir}" />
		</jar>
	</target>
	
	<!-- Build Share extension jar -->
	<target name="dist-share-jar" description="Build Share extension jar" depends="build-share-jar" if="build.share">
		<jar destfile="${dist.dir}/${jar.share.name}">
			<fileset dir="${build.jar.share.dir}" />
		</jar>
	</target>

	<!-- Build extensions jars -->
	<target name="dist-jars" description="Build extensions jars" depends="dist-repo-jar,dist-share-jar" />

	<!-- Deploy repo extension jar -->
	<target name="deploy-repo-jar" description="Deploy repo extension jar" depends="dist-repo-jar" if="build.repo">
		<if>
			<isset property="java.repo.srcdir" />
			<then>
				<!-- Copy to WEB-INF/lib -->
				<copy todir="${tomcat.repo.home}/webapps/alfresco/WEB-INF/lib" file="${dist.dir}/${jar.repo.name}" />
			</then>
			<else>
				<!-- Copy to shared/lib -->
				<copy todir="${tomcat.repo.home}/shared/lib" file="${dist.dir}/${jar.repo.name}" />
			</else>
		</if>
	</target>
	
	<!-- Deploy Share extension jar -->
	<target name="deploy-share-jar" description="Deploy Share extension jar" depends="dist-share-jar" if="build.share">
		<if>
			<isset property="java.share.srcdir" />
			<then>
				<!-- Copy to WEB-INF/lib -->
				<copy todir="${tomcat.share.home}/webapps/share/WEB-INF/lib" file="${dist.dir}/${jar.share.name}" />
			</then>
			<else>
				<!-- Copy to shared/lib -->
				<copy todir="${tomcat.share.home}/shared/lib" file="${dist.dir}/${jar.share.name}" />
			</else>
		</if>
	</target>

	<!-- Deploy all jars -->
	<target name="deploy-jars" description="Deploy all jars" depends="deploy-repo-jar,deploy-share-jar" />

	<!-- Hot copy repo extension -->
	<target name="hot-copy-repo" description="Hot copy repo extension " depends="build-repo-jar" if="build.repo" >
		<if>
			<isset property="dir.repo.exists" />
			<then>
				<!-- Copy to shared/classes -->
				<copy todir="${tomcat.repo.home}/shared/classes" includeEmptyDirs="false">
					<fileset dir="${build.jar.repo.dir}" includes="**/*.*" />
				</copy>
			</then>
		</if>
		<if>
			<isset property="java.repo.srcdir" />
			<then>
				<!-- Copy to WEB-INF/classes -->
				<copy todir="${tomcat.repo.home}/webapps/alfresco/WEB-INF/classes" includeEmptyDirs="false">
					<fileset dir="${build.jar.repo.dir}" includes="**/*.class" />
				</copy>
			</then>
		</if>
	</target>
	
	<!-- Hot copy Share extension -->
	<target name="hot-copy-share" description="Hot copy repo extension " depends="build-share-jar" if="build.share" >
		<if>
			<isset property="dir.share.exists" />
			<then>
				<!-- Copy to shared/classes -->
				<copy todir="${tomcat.share.home}/shared/classes" includeEmptyDirs="false">
					<fileset dir="${build.jar.share.dir}" includes="**/*.*" />
				</copy>
			</then>
		</if>
		<if>
			<isset property="dir.res.exists" />
			<then>
				<!-- Copy to WEB-INF/classes -->
				<copy todir="${tomcat.share.home}/webapps/share" includeEmptyDirs="false">
					<fileset dir="${build.jar.share.dir}/META-INF" includes="**/*.*" />
				</copy>
			</then>
		</if>
		<if>
			<isset property="java.share.srcdir" />
			<then>
				<!-- Copy to WEB-INF/classes -->
				<copy todir="${tomcat.share.home}/webapps/share/WEB-INF/classes" includeEmptyDirs="false">
					<fileset dir="${build.jar.share.dir}" includes="**/*.class" />
				</copy>
			</then>
		</if>
	</target>
	
	<!-- Hot copy all extensions-->
	<target name="hot-copy" description="Hot copy all extensions" depends="hot-copy-repo,hot-copy-share" />

	<!-- Reload repo webscripts -->
	<target name="reload-repo-webscripts" description="Reload repo webscripts">
		<http url="${repo.scripts.index}" method="POST" expected="200" failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>
	
	<!-- Reload Share webscripts -->
	<target name="reload-share-webscripts" description="Reload Share webscripts">
		<http url="${share.scripts.index}" method="POST" expected="200" failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>

	<!-- Hot copy repo extension and reload webscripts -->
	<target name="hot-deploy-repo" description="Hot copy repo extension and reload webscripts" depends="hot-copy-repo,reload-repo-webscripts" />
	
	<!-- Hot copy Share extension and reload webscripts -->
	<target name="hot-deploy-share" description="Hot copy Share extension and reload webscripts" depends="hot-copy-share,reload-share-webscripts" />

	<!-- Hot copy all extensions and reload webscripts -->
	<target name="hot-deploy" description="Hot copy all extensions and reload webscripts" depends="hot-deploy-repo,hot-deploy-share" />
</project>
